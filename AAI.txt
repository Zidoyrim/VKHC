Practical 1

Aim:- Design an Expert system using AIML.
!pip install python-aiml
import aiml
import os

# Initialize the kernel
kernel = aiml.Kernel()

# Learn from the AIML file (make sure the path is correct)
aiml_file = "flu.aiml"

if os.path.exists(aiml_file):
    kernel.learn(aiml_file)
else:
    print(f"Error: AIML file '{aiml_file}' not found.")
    exit()

# Welcome message
print("Expert System for Identifying Flu Symptoms")
print("Type 'bye' to exit the conversation.")

# Chat loop
while True:
    user_input = input("You: ")
    
    # Exit condition
    if user_input.lower() == "bye":
        print("System: Goodbye! Stay healthy.")
        break
    
    # Get response from AIML kernel
    response = kernel.respond(user_input)
    
    # Print the system's response
    if response:
        print(f"System: {response}")
    else:
        print("System: I'm sorry, I don't understand.")





Practical 2 (Bayes Theorem)

import numpy as np
import pandas as pd
from sklearn.datasets import load_iris
from scipy.stats import norm

# Load the Iris dataset
iris = load_iris()
iris_df = pd.DataFrame(data=iris.data, columns=iris.feature_names)
iris_df['species'] = iris.target

# For simplicity, we'll use species 0 (setosa), 1 (versicolor), and 2 (virginica)
iris_df['species'] = iris_df['species'].replace({0: 'setosa', 1: 'versicolor', 2: 'virginica'})

# Function to implement Bayes' Theorem for the Iris dataset
def bayes_iris(sepal_length, species_class):
    # Calculate the prior P(A) = P(species_class)
    prior = len(iris_df[iris_df['species'] == species_class]) / len(iris_df)
    
    # Calculate the likelihood P(B|A) using Gaussian distribution on sepal length
    class_data = iris_df[iris_df['species'] == species_class]
    mean = class_data['sepal length (cm)'].mean()
    std = class_data['sepal length (cm)'].std()
    
    # P(sepal_length | species_class)
    likelihood = norm.pdf(sepal_length, mean, std)
    
    # Calculate the evidence P(B) = P(sepal_length)
    total_mean = iris_df['sepal length (cm)'].mean()
    total_std = iris_df['sepal length (cm)'].std()
    evidence = norm.pdf(sepal_length, total_mean, total_std)
    
    # Calculate the posterior P(A|B)
    posterior = (likelihood * prior) / evidence
    return posterior

# Example: Calculating posterior for sepal length 5.1 and class 'setosa'
sepal_length = 5.0
species_class = 'virginica'
posterior_prob = bayes_iris(sepal_length, species_class)

print(f"The posterior probability of '{species_class}' given sepal length {sepal_length} is: {posterior_prob:.4f}")



Practical 3

Aim:-Implement Conditional Probability and joint probability using Python.

import pandas as pd 

# Load the penguins dataset
df = pd.read_csv('penguins.csv') 

# Display data preview
print("Data Preview:") 
print(df.head()) 

# Create a pivot table to compute joint probability (species vs island)
pivot_table = pd.crosstab(df['species'], df['island'], normalize='all') 
print("\nJoint Probability (Pivot Table):") 
print(pivot_table)

# Calculate conditional probability (species given island)
conditional_probability = pivot_table.div(pivot_table.sum(axis=0), axis=1) 
print("\nConditional Probability of Species given Island:") 
print(conditional_probability)

# Calculate P(Adelie | Biscoe)
p_adelie_given_biscoe = conditional_probability.loc['Adelie', 'Biscoe'] 
print(f"\nP(Adelie | Biscoe) = {p_adelie_given_biscoe:.4f}")



Practical 4 (Prolog Code)

Aim:- Create a simple rule-based system in Prolog for diagnosing a common illness based on symptoms.
% Facts: Define symptoms 
symptom(fever). 
symptom(cough). 
symptom(sore_throat). 
symptom(body_aches). 
symptom(runny_nose). 
symptom(headache). 
symptom(fatigue).

% Facts: Define possible illnesses 
condition(cold). 
condition(flu). 
condition(strep_throat).

% Rules: Diagnosing based on the presence of symptoms 
diagnose(cold) :- 
    symptom(runny_nose), 
    symptom(cough), 
    symptom(sore_throat), 
    \+ symptom(fever). % Absence of fever

diagnose(flu) :- 
    symptom(fever), 
    symptom(cough), 
    symptom(body_aches), 
    symptom(headache), 
    symptom(fatigue).

diagnose(strep_throat) :- 
    symptom(sore_throat), 
    symptom(fever), 
    \+ symptom(cough). % Absence of cough

% Alternative: Diagnosing based on rule covering all possible symptoms 
diagnose(unknown) :- 
    \+ diagnose(cold), 
    \+ diagnose(flu), 
    \+ diagnose(strep_throat).

% Assuming the patient has the following symptoms: 
symptom(fever). 
symptom(cough). 
symptom(body_aches). 
symptom(headache). 
symptom(fatigue). 

% You can ask Prolog: 
% ?- diagnose(Condition).




Practical 5

Aim:- Design a Fuzzy based application using Python.
import numpy as np 
import skfuzzy as fuzz 
from skfuzzy import control as ctrl 
import matplotlib.pyplot as plt 

# Define Antecedents and Consequent
traffic_density = ctrl.Antecedent(np.arange(0, 101, 1), 'traffic_density') 
time_of_day = ctrl.Antecedent(np.arange(0, 25, 1), 'time_of_day') 
green_light_duration = ctrl.Consequent(np.arange(0, 61, 1), 'green_light_duration') 

# Membership functions for traffic density
traffic_density['low'] = fuzz.trimf(traffic_density.universe, [0, 0, 50]) 
traffic_density['medium'] = fuzz.trimf(traffic_density.universe, [30, 50, 70]) 
traffic_density['high'] = fuzz.trimf(traffic_density.universe, [50, 100, 100]) 

# Membership functions for time of day
time_of_day['non_peak'] = fuzz.trimf(time_of_day.universe, [0, 0, 12]) 
time_of_day['peak'] = fuzz.trimf(time_of_day.universe, [10, 24, 24]) 

# Membership functions for green light duration
green_light_duration['short'] = fuzz.trimf(green_light_duration.universe, [0, 0, 20]) 
green_light_duration['moderate'] = fuzz.trimf(green_light_duration.universe, [15, 30, 45]) 
green_light_duration['long'] = fuzz.trimf(green_light_duration.universe, [40, 60, 60]) 

# View the membership functions
traffic_density.view() 
time_of_day.view() 
green_light_duration.view() 

# Define rules
rule1 = ctrl.Rule(traffic_density['low'] & time_of_day['non_peak'], green_light_duration['short']) 
rule2 = ctrl.Rule(traffic_density['low'] & time_of_day['peak'], green_light_duration['moderate']) 
rule3 = ctrl.Rule(traffic_density['medium'] & time_of_day['non_peak'], green_light_duration['moderate']) 
rule4 = ctrl.Rule(traffic_density['medium'] & time_of_day['peak'], green_light_duration['long']) 
rule5 = ctrl.Rule(traffic_density['high'] & time_of_day['non_peak'], green_light_duration['long']) 
rule6 = ctrl.Rule(traffic_density['high'] & time_of_day['peak'], green_light_duration['long']) 

# Control system
green_light_ctrl = ctrl.ControlSystem([rule1, rule2, rule3, rule4, rule5, rule6]) 
green_light_sim = ctrl.ControlSystemSimulation(green_light_ctrl) 

# Input values
green_light_sim.input['traffic_density'] = 75  # High traffic 
green_light_sim.input['time_of_day'] = 18      # Peak hours 

# Compute the output
green_light_sim.compute()  

# Output results
print(f"Recommended Green Light Duration: {green_light_sim.output['green_light_duration']} seconds") 
green_light_duration.view(sim=green_light_sim) 

# Show the plots
plt.show()



Practical 6

Simulate ANN Feedfoward and Backpropogation

import numpy as np
# Sigmoid Activation Function
def sigmoid(x):
    return 1 / (1 + np.exp(-x))

# Derivative of the Sigmoid Function for backpropagation
def sigmoid_derivative(x):
    return x * (1 - x)

# ANN class to simulate feedforward and backpropagation
class ArtificialNeuralNetwork:
    def __init__(self, input_size, hidden_size, output_size, learning_rate=0.5):
        # Initialize weights randomly
        self.weights_input_hidden = np.random.rand(input_size, hidden_size)
        self.weights_hidden_output = np.random.rand(hidden_size, output_size)
        
        # Initialize biases randomly
        self.bias_hidden = np.random.rand(1, hidden_size)
        self.bias_output = np.random.rand(1, output_size)
        
        # Set the learning rate
        self.learning_rate = learning_rate
    
    # Feedforward process
    def feedforward(self, X):
        # Hidden layer activation
        self.hidden_input = np.dot(X, self.weights_input_hidden) + self.bias_hidden
        self.hidden_output = sigmoid(self.hidden_input)
        
        # Output layer activation
        self.output_input = np.dot(self.hidden_output, self.weights_hidden_output) + self.bias_output
        self.output = sigmoid(self.output_input)
        
        return self.output
    
    # Backpropagation process
    def backpropagation(self, X, y):
        # Error at the output layer
        output_error = y - self.output
        output_delta = output_error * sigmoid_derivative(self.output)
        
        # Error at the hidden layer
        hidden_error = output_delta.dot(self.weights_hidden_output.T)
        hidden_delta = hidden_error * sigmoid_derivative(self.hidden_output)
        
        # Update the weights and biases using the deltas
        self.weights_hidden_output += self.hidden_output.T.dot(output_delta) * self.learning_rate
        self.weights_input_hidden += X.T.dot(hidden_delta) * self.learning_rate
        self.bias_output += np.sum(output_delta, axis=0, keepdims=True) * self.learning_rate
        self.bias_hidden += np.sum(hidden_delta, axis=0, keepdims=True) * self.learning_rate
    
    # Train the neural network
    def train(self, X, y, epochs):
        for epoch in range(epochs):
            # Feedforward
            self.feedforward(X)
            # Backpropagation
            self.backpropagation(X, y)
            # Print loss every 100 epochs
            if (epoch + 1) % 100 == 0:
                loss = np.mean(np.square(y - self.output))
                print(f'Epoch {epoch + 1}/{epochs}, Loss: {loss:.6f}')

# Example usage
if __name__ == "__main__":
    # Input dataset (XOR problem)
    X = np.array([[0, 0],
                  [0, 1],
                  [1, 0],
                  [1, 1]])
    
    # Output dataset (XOR output)
    y = np.array([[0],
                  [1],
                  [1],
                  [0]])
    
    # Parameters
    input_size = X.shape[1]  # 2 features in input
    hidden_size = 2          # 2 neurons in hidden layer
    output_size = 1          # 1 output neuron (binary classification)
    
    # Create the neural network
    ann = ArtificialNeuralNetwork(input_size, hidden_size, output_size, learning_rate=0.5)
    
    # Train the neural network
    ann.train(X, y, epochs=10000)
    
    # Test the neural network
    output = ann.feedforward(X)
    print("\nPredicted Output after training:")
    print(output)





Practical 7

simulate genetic algorithm 


import random
import string

target_string = "HELLO"
population_size = 50
mutation_rate = 0.01
generations = 200

def fitness(individual):
    return sum(1 for a, b in zip(individual, target_string) if a == b)

def create_population(size):
    return [''.join(random.choices(string.ascii_uppercase, k=len(target_string))) for _ in range(size)]

def select_parents(population):
    tournament = random.sample(population, 5)
    return max(tournament, key=fitness)

def crossover(parent1, parent2):
    crossover_point = random.randint(1, len(parent1) - 1)
    return parent1[:crossover_point] + parent2[crossover_point:]

def mutate(individual):
    individual = list(individual)
    for i in range(len(individual)):
        if random.random() < mutation_rate:
            individual[i] = random.choice(string.ascii_uppercase)
    return ''.join(individual)

population = create_population(population_size)
for generation in range(generations):
    best_individual = max(population, key=fitness)
    print(f"Generation {generation}: Best individual: {best_individual}, Fitness: {fitness(best_individual)}")

    if fitness(best_individual) == len(target_string):
        break

    new_population = []
    for _ in range(population_size):
        parent1 = select_parents(population)
        parent2 = select_parents(population)
        child = crossover(parent1, parent2)
        child = mutate(child)
        new_population.append(child)

    population = new_population

best_individual = max(population, key=fitness)
print(f"Best individual: {best_individual}, Fitness: {fitness(best_individual)}")





Practical 8

Aim:- Design intelligent agent using any AI algorithm. design expert tutoring system
class MathTutor: 
    def __init__(self): 
        self.operations = { 
            '+': lambda a, b: a + b, 
            '-': lambda a, b: a - b, 
            '*': lambda a, b: a * b, 
            '': lambda a, b: a/b, 
        } 
    def explain_operation(self, operator): 
        explanation = { 
            '+': "Addition adds two numbers together.", 
            '-': "Subtraction subtracts the second number from the first.", 
            '*': "Multiplication gives the product of two numbers.", 
            '': "Division divides the first number by the second.", 
        } 
        return explanation.get(operator, "Invalid operation.") 
    def perform_operation(self, operator, a, b): 
        if operator in self.operations: 
            return self.operations[operator](a, b)
        else: 
            return None 
if __name__ == "__main__": 
    tutor = MathTutor() 
    # Example usage: 
    operator = '+' 
    a, b = 10, 5 
    print(tutor.explain_operation(operator)) 
    result = tutor.perform_operation(operator, a, b)  
    print(f"Result of {a} {operator} {b} = {result}")

Practical 9

Design a simple language parser

class SimpleParser: 
    def __init__(self, expr): 
        self.tokens = expr.replace('(', ' ( ').replace(')', ' ) ').split() 
        self.pos = 0 
 
    def parse(self): 
        return self.expr() 
 
    def advance(self): 
        self.pos += 1 
 
    def current_token(self): 
        return self.tokens[self.pos] if self.pos < len(self.tokens) else None 
 
    def expr(self):
        result = self.term()
        while self.current_token() in ('+', '-'): 
            if self.current_token() == '+': 
                self.advance() 
                result += self.term() 
            elif self.current_token() == '-': 
                self.advance() 
                result -= self.term() 
        return result
    
    def term(self): 
        result = self.factor() 
        while self.current_token() in ('*', ''): 
            if self.current_token() == '*': 
                self.advance() 
                result *= self.factor() 
            elif self.current_token() == '': 
                self.advance() 
                result = self.factor() 
        return result 
 
    def factor(self): 
        token = self.current_token() 
        if token.isdigit(): 
            self.advance() 
            return int(token) 
        elif token == '(': 
            self.advance() 
            result = self.expr() 
            self.advance()  # skip ')' 
            return result 
        raise ValueError("Invalid syntax") 
        
if __name__ == "__main__": 
    expr = "(80 + 5) * 2" 
    parser = SimpleParser(expr) 
    result = parser.parse() 
    print(f"Result of '{expr}' is {result}")



Practical 10

Develop semantic net using python 

class SemanticNetwork: 
    def __init__(self): 
        self.network = {} 
 
    def add_concept(self, concept): 
        if concept not in self.network: 
            self.network[concept] = {'is_a': [], 'has_a': []} 
 
    def add_relation(self, relation, concept1, concept2): 
        self.add_concept(concept1) 
        self.add_concept(concept2) 
        self.network[concept1][relation].append(concept2) 
 
    def get_relations(self, concept): 
        return self.network.get(concept, {}) 
    
    def display_network(self): 
        for concept, relations in self.network.items(): 
            print(f"Concept: {concept}") 
            for relation, related_concepts in relations.items(): 
                for related_concept in related_concepts: 
                    print(f"  {relation} -> {related_concept}")

if __name__ == "__main__": 
    sn = SemanticNetwork() 
 
    # Adding concepts and relations 
    sn.add_concept("Animal") 
    sn.add_concept("Bird") 
    sn.add_concept("Mammal") 
    sn.add_concept("Penguin") 
    sn.add_concept("Canary") 
 
    sn.add_relation("is_a", "Bird", "Animal") 
    sn.add_relation("is_a", "Mammal", "Animal") 
    sn.add_relation("is_a", "Penguin", "Bird") 
    sn.add_relation("is_a", "Canary", "Bird") 
    sn.add_relation("has_a", "Bird", "Wings") 
    sn.add_relation("has_a", "Canary", "Yellow_Feathers") 
    # Displaying the network 
    sn.display_network()
print()
